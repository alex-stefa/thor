
More SPDY protocol details: 

If a server receives a request where the sum of the data frame payload lengths does not equal the size of the Content-Length header, the server MUST return a 400 (Bad Request) error.

POST-specific changes:

Although POSTs are inherently chunked, POST requests SHOULD also be accompanied by a Content-Length header. There are two reasons for this: First, it assists with upload progress meters for an improved user experience. But second, we know from early versions of SPDY that failure to send a content length header is incompatible with many existing HTTP server implementations. Existing user-agents do not omit the Content-Length header, and server implementations have come to depend upon this.

--

If the server sends a HEADERS frame containing duplicate headers with a previous HEADERS frame for the same stream, the client must issue a stream error (Section 2.4.2) with error code PROTOCOL ERROR."

If the server sends a HEADERS frame after sending a data frame for the same stream, the client MAY ignore the HEADERS frame. Ignoring the HEADERS frame after a data frame prevents handling of HTTP's trailing headers."

--

The user-agent is free to prioritize requests as it sees fit. If the user-agent cannot make progress without receiving a resource, it should attempt to raise the priority of that resource. Resources such as images, SHOULD generally use the lowest priority.

====

Rewrite error handling related to sockets for Python3 (socket.error --> OSError)
http://docs.python.org/3.3/library/socket.html
http://docs.python.org/3.3/library/exceptions.html#OSError

====

Rewrite string formatting using new syntax (.format instead of % operator)

====

Better socket write performance: is b''.join(..) good enough?
Better socket read performance: see thor/spdy/common.py in handle_input(..)

====

Check more Python3 changes here: http://docs.python.org/3.2/whatsnew/3.0.html
NB: http://docs.python.org/3.2/howto/unicode.html#unicode-howto

====

